<div class="col-md-3">
    @if (Deal != null)
    {
        <div class="card mb-2 shadow-sm">
            <img class="card-img-top ihar-img" style="width: 290px; height: 220px" @onclick="(() => RedirectToItem(Deal.IdItem))" src=@($"{UserService.BaseUrl}/ItemsPictures/{Deal.IdItemPicture}")>
            <div class="card-body">
                <h6 class="card-title">@Deal.ItemTypeName / @Deal.ItemClassName</h6>
                <h5 class="card-title" style="@StyleHelper.GetRarityColor(Deal.Rarity)">@Deal.ItemSubClassName | @Deal.SkinName</h5>
                
                <hr/>
                
                <a class="ihar-link" @onclick="(() => RedirectToUser(Deal.UserUUID))">
                    <h5 class="card-title">Username: @Deal.Username</h5>
                </a>
                <h4 class="card-text">Price: @Deal.Price$</h4>
                <div class="row">
                    <button class="btn btn-dark" @onclick="(() => RedirectToDealOffers(Deal.IdDeal))">Offers</button>
                </div>
                
                <hr/>
                
                <h3>Offer</h3>
                
                @if (!isEditing)
                {
                    <h4 class="card-text">Price: @Offer.OfferPrice$</h4>
                    @if (Offer.OffererUUID == UserService.UserUUID)
                    {
                        <div class="row">
                            <button class="btn btn-dark mb-1" @onclick="EditingSwitch">Edit Offer</button>
                            <button class="btn btn-dark" @onclick="() => DeleteOffer(Offer.IdDealOffer)">Delete Offer</button>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <button class="btn btn-primary" @onclick="() => AcceptOffer(Offer.IdDeal, Offer.IdDealOffer)">Accept Offer</button>
                        </div>
                    }
                }
                else
                {
                    <EditForm Model="@OfferUpdateDto" FormName="OfferUpdateForm" OnValidSubmit="EditOffer">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <input type="text" class="form-control mb-1" placeholder="@Offer.OfferPrice" @bind="@priceAsString" />
                        <div class="row">
                            <button type="submit" class="btn btn-primary mb-1">Edit Offer</button>
                        </div>
                    </EditForm>
                    <div class="row">
                        <button class="btn btn-dark" @onclick="EditingSwitch">Cancel</button>
                    </div>
                }
                </div>
        </div>
    }
</div>

@code{
    [Parameter]
    public DealOffersReadDto Offer { get; set; }

    private DealOffersUpdateDto OfferUpdateDto = new DealOffersUpdateDto();
    private DealReadDto Deal;
    private bool isEditing = false;
    private string priceAsString;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await UserService.HttpClient.GetAsync($"{UserService.BaseUrl}/deals/{Offer.IdDeal}");
        await MessageService.ShowMessage(response);
        if (response.IsSuccessStatusCode) Deal = await response.Content.ReadFromJsonAsync<DealReadDto>();
    }

    private void EditingSwitch()
    {
        isEditing = !isEditing;
    }

    private async Task AcceptOffer(int IdDeal, int IdDealOffer)
    {
        HttpResponseMessage response = await UserService.HttpClient.PostAsync($"{UserService.BaseUrl}/deals/{IdDeal}/offers/{IdDealOffer}/accept", null);
        await MessageService.ShowMessage(response);
    }
    private async Task EditOffer()
    {
        if (decimal.TryParse(priceAsString, out decimal result))
        {
            OfferUpdateDto.OfferPrice = result;
            OfferUpdateDto.IdDealOffer = Offer.IdDealOffer;
            HttpResponseMessage response = await UserService.HttpClient.PutAsJsonAsync($"{UserService.BaseUrl}/dealoffers", OfferUpdateDto);
            await MessageService.ShowMessage(response);
        }
        else
        {
            await MessageService.ShowMessage("Incorrect Price! Correct format: 12,34 or 12");
        } 
    }
    private async Task DeleteOffer(int idDealOffer)
    {
        HttpResponseMessage response = await UserService.HttpClient.DeleteAsync($"{UserService.BaseUrl}/dealoffers/{idDealOffer}");
        await MessageService.ShowMessage(response);
    }
    
    private void RedirectToUser(string uuid)
    {
        NavManager.NavigateTo($"/users/{uuid}");
    }
    private void RedirectToItem(int id)
    {
        NavManager.NavigateTo($"/items/{id}");
    }
    private void RedirectToDealOffers(int dealId)
    {
        NavManager.NavigateTo($"deals/{dealId}/offers");
    }
}
