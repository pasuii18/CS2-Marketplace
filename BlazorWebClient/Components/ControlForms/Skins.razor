<div class="row justify-content-center align-items-start">
    <div class="col-md-3 border rounded p-4 m-3">
        <h2>Create</h2>
        <EditForm Model="@skinsCreateDto" FormName="createForm" OnSubmit="CreateSubmit">
            <div class="mb-3">
                <input type="text" class="form-control" placeholder="Skin Name" @bind="@skinsCreateDto.SkinName" />
            </div>
            <button type="submit" class="btn btn-dark">Create</button>
        </EditForm>
    </div>
    <div class="col-md-3 border rounded p-4 m-3">
        <h2>Update</h2>
        <EditForm Model="@skinsUpdateDto" FormName="updateForm" OnSubmit="UpdateSubmit">
            <div class="mb-3">
                <select class="form-select" @onchange="UpdateValueChanged">
                    @foreach (var skins in skinsReadDto)
                    {
                        <option class="form-option" value="@skins.IdSkin">@skins.SkinName</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <input type="text" class="form-control" placeholder="New Name" @bind="@skinsUpdateDto.SkinName"/>
            </div>
            <button type="submit" class="btn btn-dark">Update</button>
        </EditForm>
    </div>
    <div class="col-md-3 border rounded p-4 m-3">
        <h2>Delete</h2>
        <div class="mb-3">
            <select class="form-select" @onchange="DeleteValueChanged">
                @foreach (var skins in skinsReadDto)
                {
                    <option class="form-option" value="@skins.IdSkin">@skins.SkinName</option>
                }
            </select>
        </div>
        <button type="submit" class="btn btn-dark" @onclick="DeleteSubmit">Delete</button>
    </div>
</div>

@code{
    SkinsCreateDto skinsCreateDto = new SkinsCreateDto();
    SkinsUpdateDto skinsUpdateDto = new SkinsUpdateDto();
    int deleteValue;
    
    List<SkinsReadDto> skinsReadDto = new List<SkinsReadDto>();

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await UserService.HttpClient.GetAsync($"{UserService.BaseUrl}/itemsskins");
        await MessageService.ShowMessage(response);
        if (response.IsSuccessStatusCode) skinsReadDto = await response.Content.ReadFromJsonAsync<List<SkinsReadDto>>();
    }
    
    private void UpdateValueChanged(ChangeEventArgs e)
    {
        skinsUpdateDto.IdSkin = int.Parse(e.Value.ToString());
    }
    private void DeleteValueChanged(ChangeEventArgs e)
    {
        deleteValue = int.Parse(e.Value.ToString());
    }
    
    private async Task CreateSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.PostAsJsonAsync($"{UserService.BaseUrl}/itemsskins", skinsCreateDto);
        await MessageService.ShowMessage(response);
    }
    private async Task UpdateSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.PutAsJsonAsync($"{UserService.BaseUrl}/itemsskins", skinsUpdateDto);
        await MessageService.ShowMessage(response);
    }
    private async Task DeleteSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.DeleteAsync($"{UserService.BaseUrl}/itemsskins/{deleteValue}");
        await MessageService.ShowMessage(response);
    }
}
