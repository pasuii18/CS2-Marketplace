<div class="row justify-content-center align-items-start">
    <div class="col-md-3 border rounded p-4 m-3">
        <h2>Create</h2>
        <EditForm Model="@itemsTypeCreateDto" FormName="createForm" OnSubmit="CreateSubmit">
            <div class="mb-3">
                <select class="form-select" @onchange="CreateValueChanged">
                    <option class="form-option" value="0">Not Selected</option>
                    @foreach (var itemClass in itemsClasses)
                    {
                        <option class="form-option" value="@itemClass.IdItemClass">@itemClass.ItemClassName | @itemClass.ItemSubClassName</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <input type="text" class="form-control" placeholder="New Type Name" @bind="@itemsTypeCreateDto.ItemTypeName"/>
            </div>
            <button type="submit" class="btn btn-dark">Create</button>
        </EditForm>
    </div>
    <div class="col-md-3 border rounded p-4 m-3">
        <h2>Update</h2>
        <EditForm Model="@itemsTypeUpdateDto" FormName="updateForm" OnSubmit="UpdateSubmit">
            <div class="mb-3">
                <select class="form-select" @onchange="UpdateTypeValueChanged">
                    <option class="form-option" value="0">Not Selected</option>
                    @foreach (var itemType in itemsTypeReadDto)
                    {
                        <option class="form-option" value="@itemType.IdItemType">@itemType.ItemTypeName | @itemType.ItemClassName | @itemType.ItemSubClasName</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <select class="form-select" @onchange="UpdateClassValueChanged" value="@itemsTypeUpdateDto.IdItemClass">
                    <option class="form-option" value="0">Not Selected</option>
                    @foreach (var itemClass in itemsClasses)
                    {
                        <option class="form-option" value="@itemClass.IdItemClass">@itemClass.ItemClassName | @itemClass.ItemSubClassName</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <input type="text" class="form-control" placeholder="@updateValue" @bind="@itemsTypeUpdateDto.ItemTypeName"/>
            </div>
            <button type="submit" class="btn btn-dark">Update</button>
        </EditForm>
    </div>
    <div class="col-md-3 border rounded p-4 m-3">
        <h2>Delete</h2>
        <div class="mb-3">
            <select class="form-select" @onchange="DeleteValueChanged">
                <option class="form-option" value="0">Not Selected</option>
                @foreach (var itemTypeReadDto in itemsTypeReadDto)
                {
                    <option class="form-option" value="@itemTypeReadDto.IdItemType">@itemTypeReadDto.ItemTypeName | @itemTypeReadDto.ItemClassName | @itemTypeReadDto.ItemSubClasName</option>
                }
            </select>
        </div>
        <button type="submit" class="btn btn-dark" @onclick="DeleteSubmit">Delete</button>
    </div>
</div>

@code{
    ItemsTypeCreateDto itemsTypeCreateDto = new ItemsTypeCreateDto();
    ItemsTypeUpdateDto itemsTypeUpdateDto = new ItemsTypeUpdateDto();
    int deleteValue;
    string updateValue = "New Type Name";
    
    List<ItemsTypeReadDto> itemsTypeReadDto = new List<ItemsTypeReadDto>();
    List<ItemsClassReadDto> itemsClasses = new List<ItemsClassReadDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadItemTypes();
        await LoadItemClasses();
    }
    
    private void CreateValueChanged(ChangeEventArgs e)
    {
        itemsTypeCreateDto.IdItemClass = int.Parse(e.Value.ToString());
    }
    private void UpdateTypeValueChanged(ChangeEventArgs e)
    {
        itemsTypeUpdateDto.IdItemType = int.Parse(e.Value.ToString());
        updateValue = itemsTypeReadDto
            .FirstOrDefault(value => value.IdItemType == itemsTypeUpdateDto.IdItemType)
            ?.ItemTypeName;
    }
    private void UpdateClassValueChanged(ChangeEventArgs e)
    {
        itemsTypeUpdateDto.IdItemClass = int.Parse(e.Value.ToString());
    }
    private void DeleteValueChanged(ChangeEventArgs e)
    {
        deleteValue = int.Parse(e.Value.ToString());
    }
    
    private async Task LoadItemTypes()
    {
        HttpResponseMessage response = await UserService.HttpClient.GetAsync($"{UserService.BaseUrl}/itemstype");
        await MessageService.ShowMessage(response);
        if (response.IsSuccessStatusCode)
        {
            itemsTypeReadDto = await response.Content.ReadFromJsonAsync<List<ItemsTypeReadDto>>();
        }
    }
    private async Task LoadItemClasses()
    {
        HttpResponseMessage response = await UserService.HttpClient.GetAsync($"{UserService.BaseUrl}/itemsclass");
        await MessageService.ShowMessage(response);
        if (response.IsSuccessStatusCode) itemsClasses = await response.Content.ReadFromJsonAsync<List<ItemsClassReadDto>>();
    }
    
    private async Task CreateSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.PostAsJsonAsync($"{UserService.BaseUrl}/itemstype", itemsTypeCreateDto);
        await MessageService.ShowMessage(response);
    }
    private async Task UpdateSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.PutAsJsonAsync($"{UserService.BaseUrl}/itemstype", itemsTypeUpdateDto);
        await MessageService.ShowMessage(response);
    }
    private async Task DeleteSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.DeleteAsync($"{UserService.BaseUrl}/itemstype/{deleteValue}");
        await MessageService.ShowMessage(response);
    }
}