<div class="row justify-content-center align-items-start">
    <div class="col-md-6 border rounded p-4 m-3">
        <h2>Create</h2>
        <EditForm Model="@itemCreateDto" FormName="createForm" OnSubmit="CreateSubmit">
            <img src="data:image/jpeg;base64,@Convert.ToBase64String(UploadedPicture)" style="width: 280px; height: 280px;" class="img rounded mb-3" alt="There will be picture preview =)" id="itemPicture" />
            <div class="mb-3">
                <InputFile type="floatingInput" class="form-control" accept=".jpg, .jpeg, .png, .gif, .bmp, .webp" id="image" placeholder="File" @bind-Value="itemCreateDtoShort.ItemPicture" OnChange="HandleFileUpload" />
            </div>
            
            <div class="mb-3">
                <select class="form-select" @onchange="CreateRarityValueChanged">
                    <option class="form-option" value="-1">Not Selected</option>
                    <option class="form-option" value="0">Gray</option>
                    <option class="form-option" value="1">Light-Blue</option>
                    <option class="form-option" value="2">Blue</option>
                    <option class="form-option" value="3">Purple</option>
                    <option class="form-option" value="4">Pink</option>
                    <option class="form-option" value="5">Red</option>
                    <option class="form-option" value="6">Yellow</option>
                </select>
            </div>
            
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        <select class="form-select" @onchange="CreateSkinValueChanged">
                            <option class="form-option" value="0">Not Selected</option>
                            @foreach (var skins in skinsReadDto)
                            {
                                <option class="form-option" value="@skins.SkinName">@skins.SkinName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-auto">
                    <h5 class="mt-1">or</h5>
                </div>
                <div class="col">
                    <div class="mb-3">
                        <input type="text" class="form-control" placeholder="Skin" @bind="@itemCreateDto.SkinName"/>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        <select class="form-select" @onchange="CreateTypeValueChanged">
                            <option class="form-option" value="0">Not Selected</option>
                            @foreach (var itemType in itemTypesReadDto)
                            {
                                <option class="form-option" value="@itemType.ItemTypeName">@itemType.ItemTypeName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-auto">
                    <h5 class="mt-1">or</h5>
                </div>
                <div class="col">
                    <div class="mb-3">
                        <input type="text" class="form-control" placeholder="Type Name" @bind="@itemCreateDto.ItemTypeName"/>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        <select class="form-select" @onchange="CreateClassValueChanged">
                            <option class="form-option" value="0">Not Selected</option>
                            @foreach (var itemClass in itemClassesReadDto)
                            {
                                <option class="form-option" value="@itemClass.ItemClassName">@itemClass.ItemClassName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-auto">
                    <h5 class="mt-1">or</h5>
                </div>
                <div class="col">
                    <div class="mb-3">
                        <input type="text" class="form-control" placeholder="Class Name" @bind="@itemCreateDto.ItemClassName"/>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="mb-3">
                        <select class="form-select" @onchange="CreateSubClassValueChanged">
                            <option class="form-option" value="0">Not Selected</option>
                            @foreach (var itemSubClass in itemSubClassesReadDto)
                            {
                                <option class="form-option" value="@itemSubClass.ItemSubClassName">@itemSubClass.ItemSubClassName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-auto">
                    <h5 class="mt-1">or</h5>
                </div>
                <div class="col">
                    <div class="mb-3">
                        <input type="text" class="form-control" placeholder="SubClass Name" @bind="@itemCreateDto.ItemSubClassName"/>
                    </div>
                </div>
            </div>
            
            <div class="mb-3 border rounded p-4">
                @for (int i = 0; i < itemCreateDto.ItemTypeCharacteristics.Count; i++)
                {
                    var index = i;
                    <div class="row">
                        <div class="col">
                            <div class="mb-3">
                                <select class="form-select" @onchange="(e) => CreateTypeCharacteristicValueChanged(e, index)">
                                    <option class="form-option" value="0">Not Selected</option>
                                    @foreach (var typeCharacteristic in typeCharacteristicsReadDto)
                                    {
                                        <option class="form-option" value="@typeCharacteristic.TypeCharacteristicName">@typeCharacteristic.TypeCharacteristicName</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-auto">
                            <h5 class="mt-1">or</h5>
                        </div>
                        <div class="col">
                            <div class="mb-3">
                                <input type="text" class="form-control" placeholder="Type Characteristic Name" @bind="@itemCreateDto.ItemTypeCharacteristics[index].TypeCharacteristicName"/>
                            </div>
                        </div>
                        <div class="mb-3">
                            <input type="text" class="form-control" placeholder="New Type Value" @bind="@itemCreateDto.ItemTypeCharacteristics[index].TypeCharacteristicValue"/>
                        </div>
                    </div>
                    <button type="button" class="btn btn-dark" @onclick="() => DeleteTypeChar(index)">Delete</button>
                    <hr/>
                }
                <button type="button" class="btn btn-dark" @onclick="AddTypeChar">Add Type Characteristic</button>
            </div>
            <div class="mb-3 border rounded p-4">
                @for (int i = 0; i < itemCreateDto.ItemClassCharacteristics.Count; i++)
                {
                    var index = i;
                    <div class="row">
                        <div class="col">
                            <div class="mb-3">
                                <select class="form-select" @onchange="(e) => CreateClassCharacteristicValueChanged(e, index)">
                                    <option class="form-option" value="0">Not Selected</option>
                                    @foreach (var classCharacteristic in classCharacteristicsReadDto)
                                    {
                                        <option class="form-option" value="@classCharacteristic.ClassCharacteristicName">@classCharacteristic.ClassCharacteristicName</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-auto">
                            <h5 class="mt-1">or</h5>
                        </div>
                        <div class="col">
                            <div class="mb-3">
                                <input type="text" class="form-control" placeholder="Class Characteristic Name" @bind="@itemCreateDto.ItemClassCharacteristics[index].ClassCharacteristicName"/>
                            </div>
                        </div>
                        <div class="mb-3">
                            <input type="text" class="form-control" placeholder="New Class Value" @bind="@itemCreateDto.ItemClassCharacteristics[index].ClassCharacteristicValue"/>
                        </div>
                    </div>
                    <button type="button" class="btn btn-dark" @onclick="() => DeleteClassChar(index)">Delete</button>
                    <hr/>
                }
                <button type="button" class="btn btn-dark" @onclick="AddClassChar">Add Class Characteristic</button>
            </div>

            <button type="submit" class="btn btn-dark">Create</button>
        </EditForm>
    </div>
    <div class="col-md-3 border rounded p-4 m-3">
        <h2>Delete</h2>
        <div class="mb-3">
            <select class="form-select" @onchange="DeleteValueChanged">
                <option class="form-option" value="0">Not Selected</option>
                @foreach (var itemReadDto in itemsReadDto)
                {
                    <option class="form-option" value="@itemReadDto.IdItem">@itemReadDto.ItemTypeName / @itemReadDto.ItemClassName / @itemReadDto.ItemSubClassName / @itemReadDto.SkinName</option>
                }
            </select>
        </div>
        <button type="submit" class="btn btn-dark" @onclick="DeleteSubmit">Delete</button>
    </div>
</div>

@code{
    ItemCreateSpecialDto itemCreateDto = new ItemCreateSpecialDto();
    ItemCreateSpecialDtoShort itemCreateDtoShort = new ItemCreateSpecialDtoShort();
    
    int deleteValue;
    byte[] UploadedPicture = { 0 };
    
    List<ItemsReadDto> itemsReadDto = new List<ItemsReadDto>();
    
    List<SkinsReadDto> skinsReadDto = new List<SkinsReadDto>();
    List<ItemsTypeReadDto> itemTypesReadDto = new List<ItemsTypeReadDto>();
    List<ItemsClassReadDto> itemClassesReadDto = new List<ItemsClassReadDto>();
    List<ItemsSubClassReadDto> itemSubClassesReadDto = new List<ItemsSubClassReadDto>();

    List<TypeCharacteristicsReadDto> typeCharacteristicsReadDto = new List<TypeCharacteristicsReadDto>();
    List<ClassCharacteristicsReadDto> classCharacteristicsReadDto = new List<ClassCharacteristicsReadDto>();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
        await LoadSkins();
        await LoadItemTypes();
        await LoadItemClasses();
        await LoadItemSubClasses();
        await LoadTypeCharacteristics();
        await LoadClassCharacteristics();
    }

    private async Task LoadItems() => itemsReadDto = await LoadListFromResponse<ItemsReadDto>("items");
    private async Task LoadSkins() => skinsReadDto = await LoadListFromResponse<SkinsReadDto>("itemsskins");
    private async Task LoadItemTypes() => itemTypesReadDto = await LoadListFromResponse<ItemsTypeReadDto>("itemstype");
    private async Task LoadItemClasses() => itemClassesReadDto = await LoadListFromResponse<ItemsClassReadDto>("itemsclass");
    private async Task LoadItemSubClasses() => itemSubClassesReadDto = await LoadListFromResponse<ItemsSubClassReadDto>("itemssubclass");
    private async Task LoadTypeCharacteristics() => typeCharacteristicsReadDto = await LoadListFromResponse<TypeCharacteristicsReadDto>("typecharacteristics");
    private async Task LoadClassCharacteristics() => classCharacteristicsReadDto = await LoadListFromResponse<ClassCharacteristicsReadDto>("classcharacteristics");
    private async Task<List<T>> LoadListFromResponse<T>(string endpoint)
    {
        HttpResponseMessage response = await UserService.HttpClient.GetAsync($"{UserService.BaseUrl}/{endpoint}");
        await MessageService.ShowMessage(response);
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<T>>();
        }
        return null;
    }

    private void CreateSkinValueChanged(ChangeEventArgs e) => itemCreateDto.SkinName = e.Value.ToString();
    private void CreateRarityValueChanged(ChangeEventArgs e) => itemCreateDto.Rarity = int.Parse(e.Value.ToString());
    private void CreateTypeValueChanged(ChangeEventArgs e) => itemCreateDto.ItemTypeName = e.Value.ToString();
    private void CreateClassValueChanged(ChangeEventArgs e) => itemCreateDto.ItemClassName = e.Value.ToString();
    private void CreateSubClassValueChanged(ChangeEventArgs e) => itemCreateDto.ItemSubClassName = e.Value.ToString();
    
    private void AddTypeChar() => itemCreateDto.ItemTypeCharacteristics.Add(new TypeCharacteristicsValuesReadDto());
    private void AddClassChar() => itemCreateDto.ItemClassCharacteristics.Add(new ClassCharacteristicsValuesReadDto());
    private void DeleteClassChar(int i)
    {
        if (i >= 0 && i < itemCreateDto.ItemClassCharacteristics.Count)
        {
            itemCreateDto.ItemClassCharacteristics.RemoveAt(i);
        }
    }
    private void DeleteTypeChar(int i)
    {
        if (i >= 0 && i < itemCreateDto.ItemTypeCharacteristics.Count)
        {
            itemCreateDto.ItemTypeCharacteristics.RemoveAt(i);
        }
    }
    
    private void CreateTypeCharacteristicValueChanged(ChangeEventArgs e, int i) => itemCreateDto.ItemTypeCharacteristics[i].TypeCharacteristicName = e.Value.ToString();
    private void CreateClassCharacteristicValueChanged(ChangeEventArgs e, int i) => itemCreateDto.ItemClassCharacteristics[i].ClassCharacteristicName = e.Value.ToString();
    
    private void DeleteValueChanged(ChangeEventArgs e) => deleteValue = int.Parse(e.Value.ToString());
    
    private async Task CreateSubmit()
    {
        itemCreateDtoShort.ItemJson = JsonConvert.SerializeObject(itemCreateDto);
        Console.WriteLine(itemCreateDtoShort.ItemJson);
        
        var formData = new MultipartFormDataContent();
        formData.Add(new StringContent(itemCreateDtoShort.ItemJson ?? string.Empty), "ItemJson");
        
        if (itemCreateDtoShort.ItemPicture != null)
        {
            formData.Add(new StreamContent(itemCreateDtoShort.ItemPicture.OpenReadStream()), "ItemPicture", itemCreateDtoShort.ItemPicture.Name);
        }
        else
        {
            await MessageService.ShowMessage("Item Picture cannot be empty!");
            return;
        }
        
        HttpResponseMessage response = await UserService.HttpClient.PostAsync($"{UserService.BaseUrl}/items", formData);
        await MessageService.ShowMessage(response);
    }
    private async Task DeleteSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.DeleteAsync($"{UserService.BaseUrl}/items/{deleteValue}");
        await MessageService.ShowMessage(response);
    }
    
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        if (e.File.Size <= 512000)
        {
            itemCreateDtoShort.ItemPicture = e.File;
            using (var memoryStream = new MemoryStream())
            {
                await itemCreateDtoShort.ItemPicture.OpenReadStream().CopyToAsync(memoryStream);
                UploadedPicture = memoryStream.ToArray();
            }
        }
        else
        {
            await MessageService.ShowMessage("Max size of picture is 512 KB. Sorry :(");
        }
    }
}