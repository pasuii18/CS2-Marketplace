@if (roles.Count == 0)
{
    <h3>Only for SuperCoolGuys =)</h3>
}
else
{
    <div class="row justify-content-center align-items-start">
        <div class="col-md-3 border rounded p-4 m-3">
            <h2>Create</h2>
            <EditForm Model="@roleCreateDto" FormName="createForm" OnSubmit="CreateSubmit">
                <div class="mb-3">
                    <input type="text" class="form-control" placeholder="Role Name" @bind="@roleCreateDto.RoleName" />
                </div>
                <button type="submit" class="btn btn-dark">Create</button>
            </EditForm>
        </div>
        <div class="col-md-3 border rounded p-4 m-3">
            <h2>Update</h2>
            <EditForm Model="@roleUpdateDto" FormName="updateForm" OnSubmit="UpdateSubmit">
                <div class="mb-3">
                    <select class="form-select" @onchange="UpdateValueChanged">
                        <option class="form-option" value="0">Not Selected</option>
                        @foreach (var role in roles)
                        {
                            <option class="form-option" value="@role.IdRole">@role.RoleName</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <input type="text" class="form-control" placeholder="New Name" @bind="@roleUpdateDto.NewRoleName"/>
                </div>
                <button type="submit" class="btn btn-dark">Update</button>
            </EditForm>
        </div>
        <div class="col-md-3 border rounded p-4 m-3">
            <h2>Delete</h2>
            <div class="mb-3">
                <select class="form-select" @onchange="DeleteValueChanged">
                    <option class="form-option" value="0">Not Selected</option>
                    @foreach (var role in roles)
                    {
                        <option class="form-option" value="@role.IdRole">@role.RoleName</option>
                    }
                </select>
            </div>
            <button type="submit" class="btn btn-dark" @onclick="DeleteSubmit">Delete</button>
        </div>
    </div>
}

@code{
    RolesCreateDto roleCreateDto = new RolesCreateDto();
    RolesUpdateDto roleUpdateDto = new RolesUpdateDto();
    int updateValue;
    int deleteValue;
    
    List<RolesReadDto> roles = new List<RolesReadDto>();

    protected override async Task OnInitializedAsync()
    {
        if (UserService.IsSuperCoolGuy)
        {
            HttpResponseMessage response = await UserService.HttpClient.GetAsync($"{UserService.BaseUrl}/roles");
            await MessageService.ShowMessage(response);
            if (response.IsSuccessStatusCode) roles = await response.Content.ReadFromJsonAsync<List<RolesReadDto>>();
        }
    }
    
    private void UpdateValueChanged(ChangeEventArgs e)
    {
        updateValue = int.Parse(e.Value.ToString());
    }
    private void DeleteValueChanged(ChangeEventArgs e)
    {
        deleteValue = int.Parse(e.Value.ToString());
    }
    
    private async Task CreateSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.PostAsJsonAsync($"{UserService.BaseUrl}/roles", roleCreateDto);
        await MessageService.ShowMessage(response);
    }
    private async Task UpdateSubmit()
    {
        roleUpdateDto.IdRole = updateValue;
        HttpResponseMessage response = await UserService.HttpClient.PutAsJsonAsync($"{UserService.BaseUrl}/roles", roleUpdateDto);
        await MessageService.ShowMessage(response);
    }
    private async Task DeleteSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.DeleteAsync($"{UserService.BaseUrl}/roles/{deleteValue}");
        await MessageService.ShowMessage(response);
    }
}
