@page "/signup"
@rendermode InteractiveServer

<div class="container">
    <div class="row justify-content-center align-items-center">
        <div class="col-md-4 border rounded p-4">
            <h3 class="mb-4">Sign Up</h3>

            <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="username">Username:</label>
                    <InputText id="username" class="form-control" @bind-Value="@user.Username" />
                    <ValidationMessage For="@(() => user.Username)" />
                </div>

                <div class="form-group">
                    <label for="login">Login:</label>
                    <InputText id="login" class="form-control" @bind-Value="@user.Login" />
                    <ValidationMessage For="@(() => user.Login)" />
                </div>

                <div class="form-group">
                    <label for="password">Password:</label>
                    <InputText id="password" class="form-control" @bind-Value="@user.Password" type="password" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>

                <button type="submit" class="btn btn-dark">Sign Up</button>
            </EditForm>
            <button class="btn btn-dark" @onclick="RedirectSignIn">Already have an account?</button>
        </div>
    </div>
</div>

@code {
    UserCreateDto user = new UserCreateDto();

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.PostAsJsonAsync<UserCreateDto>($"{UserService.BaseUrl}/Auth/registration", user);
        await MessageService.ShowMessage(response);

        if (response.IsSuccessStatusCode)
        {
            UserService.Token = await response.Content.ReadAsStringAsync();
            NavManager.NavigateTo("/");
        }
    }

    private void RedirectSignIn()
    {
        NavManager.NavigateTo("/signin");
    }
}