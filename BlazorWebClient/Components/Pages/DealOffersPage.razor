@page "/deals/{id}/offers"
@rendermode InteractiveServer

@if (DealOffers == null)
{
    <p>Sorry, something went wrong? =(</p>
}
else
{

    if (UserService.IsUserLoggedIn && Deal.UserUUID != UserService.UserUUID)
    {
        <div class="container">
            <div class="row justify-content-center align-items-center">
                <div class="col-md-3 border rounded p-4 m-3">
                    <EditForm Model="@offerCreateDto" FormName="offerCreateForm" OnValidSubmit="CreateOffer">
                        <div class="mb-3">
                            <input type="text" class="form-control" placeholder="Price" @bind="@priceAsString"/>
                        </div>
                        <div class="row">
                            <button type="submit" class="btn btn-dark">Make an Offer!</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    
    if(DealOffers.Count == 0)
    {
        <div class="container">
            <div class="row justify-content-center align-items-center">
                <div class="col-md-5 border rounded p-2 mt-3 text-center">
                    <h2 class="my-auto">There is no offers yet!</h2>
                </div>
            </div>
        </div>
    }
    
    if(DealOffers.Count != 0)
    {
        <div class="container">
            <div class="row justify-content-center align-items-center">
                @if (@DealOffers != null && DealOffers.Any())
                {
                    @foreach (var offer in DealOffers)
                    {
                        <div class="col-md-3 mb-3">
                            <div class="card p-3">
                                <div class="row align-items-center">
                                    <div class="col-md-8">
                                        <a class="ihar-link" @onclick="(() => UserChoose(offer.OffererUUID))">
                                            <h6 class="card-text" style="@StyleHelper.GetUserColor(offer.OffererUUID, UserService.UserUUID)">Offerer: @offer.OffererUUID</h6>
                                        </a>
                                        <h5 class="card-text">Price: @offer.OfferPrice$</h5>
                                    </div>
                                    <div class="col-md-3">
                                        @if (Deal != null && Deal.UserUUID == UserService.UserUUID)
                                        {
                                            <button class="btn btn-dark" @onclick="() => AcceptOffer(offer.IdDeal, offer.IdDealOffer)">Accept</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-secondary">No_>:3</button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public string Id { get; set; }
    List<DealOffersReadDto> DealOffers;
    DealReadDto Deal;
    DealOffersCreateDto offerCreateDto = new DealOffersCreateDto();
    string priceAsString;

    protected override async Task OnInitializedAsync()
    {
        await LoadOffers();
        await LoadDealInfo();
    }

    private async Task LoadOffers()
    {
        HttpResponseMessage response = await UserService.HttpClient.GetAsync($"{UserService.BaseUrl}/deals/{Id}/offers");
        await MessageService.ShowMessage(response);
        if (response.IsSuccessStatusCode)
        {
            DealOffers = await response.Content.ReadFromJsonAsync<List<DealOffersReadDto>>();
            DealOffers = DealOffers.OrderBy(deal => deal.OfferPrice).ToList();
        }
    }
    private async Task LoadDealInfo()
    {
        HttpResponseMessage response = await UserService.HttpClient.GetAsync($"{UserService.BaseUrl}/deals/{Id}");
        await MessageService.ShowMessage(response);
        if (response.IsSuccessStatusCode)
        {
            Deal = await response.Content.ReadFromJsonAsync<DealReadDto>();
        }
    }
    
    private async Task CreateOffer()
    {
        if (decimal.TryParse(priceAsString, out decimal result))
        {
            offerCreateDto.OfferPrice = result;
            offerCreateDto.IdDeal = int.Parse(Id);
            HttpResponseMessage response = await UserService.HttpClient.PostAsJsonAsync($"{UserService.BaseUrl}/dealoffers", offerCreateDto);
            await MessageService.ShowMessage(response);
        }
        else
        {
            await MessageService.ShowMessage("Incorrect Price! Correct format: 12,34 or 12");
        }   
    }
    private async Task AcceptOffer(int IdDeal, int IdDealOffer)
    {
        HttpResponseMessage response = await UserService.HttpClient.PostAsync($"{UserService.BaseUrl}/deals/{IdDeal}/offers/{IdDealOffer}/accept", null);
        await MessageService.ShowMessage(response);
    }
    
    private void UserChoose(string id)
    {
        NavManager.NavigateTo($"/users/{id}");
    }
}