@page "/signin"
@rendermode InteractiveServer

<div class="container">
    <div class="row justify-content-center align-items-center">
        <div class="col-md-4 border rounded p-4 mt-3 text-center">
            <h3 class="mb-4">Sign In</h3>

            <EditForm Model="@user" FormName="signInForm" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                
                <div class="form-group mb-1">
                    <input type="text" class="form-control" placeholder="Login" @bind="@user.Login"/>
                    <ValidationMessage For="@(() => user.Login)" />
                </div>

                <div class="form-group mb-2">
                    <input type="password" class="form-control" placeholder="Password" @bind="@user.Password"/>
                    <ValidationMessage For="@(() => user.Password)" />
                </div>

                <div class="row mb-2">
                    <button type="submit" class="btn btn-success">Sign In</button>
                </div>
            </EditForm>
            <div class="row">
                <button class="btn btn-dark" @onclick="RedirectSignUp">Dont have an account?</button>
            </div>
        </div>
    </div>
</div>

@code {
    UserAuthDto user = new UserAuthDto();

    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response = await UserService.HttpClient.PostAsJsonAsync<UserAuthDto>($"{UserService.BaseUrl}/Auth", user);
        await MessageService.ShowMessage(response);

        if (response.IsSuccessStatusCode)
        {
            UserService.Token = await response.Content.ReadAsStringAsync();
            NavManager.NavigateTo("/");
        }
    }

    private void RedirectSignUp()
    {
        NavManager.NavigateTo("/signup");
    }
}